<%
var agent = "publisher";
var retrieveSavedAlertsTypes = function () {
    var i,api,apis,length, log = new Log();

    var gson = com.google.gson.Gson();
    try {

        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }

        var allAlertTypes = APIUtil.getAllAlertTypeByStakeHolder(agent);

        var allAlertTypesJson = JSON.parse(gson.toJson(allAlertTypes));

        var userName = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(userName);

        if ("carbon.super" == tenantDomain) {
            userName = userName + "@carbon.super";
        }


        var allSavedAlertTypes = APIUtil.getSavedAlertTypesIdsByUserNameAndStakeHolder(userName, agent);
        var allSavedAlertTypesJsonObj = JSON.parse(gson.toJson(allSavedAlertTypes));

        return {
            "error": false,
            "allAlertTypeJson": allAlertTypesJson,
            "savedAlertTypeJson": allSavedAlertTypesJsonObj
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var unSubscribe = function (userName){
    var log = new Log();

    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }
        var apiDataPublisher = org.wso2.carbon.apimgt.gateway.alert.AlertTypesPublisher;
        var apiDatapublisherInstance = new apiDataPublisher();

        apiDatapublisherInstance.unSubscribe(userName,agent);

        return {
            error: false
        }

    } catch (e) {

        log.error(e.code);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var saveAlertsTypes  = function (checkedAlertList, emailList,userName,checkedAlertListValues) {


    var log = new Log();

    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }
        var apiDataPublisher = org.wso2.carbon.apimgt.gateway.alert.AlertTypesPublisher;
        var apiDatapublisherInstance = new apiDataPublisher();
        //if it is publisher "p" if it is store agent should be "s"

        apiDatapublisherInstance.saveAndPublishAlertTypesEvent(checkedAlertList, emailList, userName, agent,
                checkedAlertListValues);

        return {
            error: false
        }


    } catch (e) {

        log.error(e.code);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }


};

var retrieveSavedEmailList = function () {

    var gson = com.google.gson.Gson();
    var log = new Log();
    var result;
    try {

        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }

        var userName = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(userName);

        if ("carbon.super" == tenantDomain) {
            userName = userName + "@carbon.super";
        }

        var allSavedEmailList = APIUtil.retrieveSavedEmailList(userName,agent);

        var allSavedEmailListJson = JSON.parse(gson.toJson(allSavedEmailList));

        return {
            "error": false,
            "allSavedEmailListJson": allSavedEmailListJson
        };


    } catch (e) {

        log.error(e.code);
        return {
            error: true,
            message: e.message.split(":")[1]
        };
    }


};

/*
* type either thresholdBackendTime or thresholdResponseTime
*/
var getPublisherAlertConfigs  = function (type) {

    var log = new Log();
    var result;
    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var username = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var domainName = MultitenantUtils.getTenantDomain(username);

        var appName = "APIM_ALERT_CONFIGURATION"; 
        var query =  "from ApiCreatorAlertConfiguration on apiCreator=='" 
                    + username + "' and apiCreatorTenantDomain=='" + domainName + "' and "
                    + type +"!=0 select apiName,apiVersion,apiCreator,apiCreatorTenantDomain, " + type + "; ";

        var result = APIUtil.executeQueryOnStreamProcessor(appName, query);

        var objArr = [];
        if(result != null ) {
            var parsedDataResult = JSON.parse(result);
            if(parsedDataResult.records != null) {              
              var items = parsedDataResult.records;
              for (var i = 0; i < items.length; i ++){
                    var record = items[i];
                    var obj =  {  
                              "values":{  
                                 "apiName": record[0],
                                 "apiVersion" : record[1],
                                 "apiCreator" : record[2],
                                 "apiCreatorTenantDomain":record[3],
                                 "value" : record[4]
                                 }
                              }
                    objArr.push(obj);
              }        
            }
        }
        return objArr;
    } catch (e) {
        log.error(e.message);
        return {
            error:true
        };
    }
};

var addOrUpdatePublisherAlertConfigs  = function (apiName, apiVersion, type, value) {

    var log = new Log();
    var result;
    try {
        var thresholdResponseTime = 0;
        var thresholdBackendTime = 0;
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var username = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var domainName = MultitenantUtils.getTenantDomain(username);
        var appName = "APIM_ALERT_CONFIGURATION"; 
   
        if(type == 'thresholdBackendTime') {
            thresholdBackendTime = value;
            conditionQuery = "set ApiCreatorAlertConfiguration.thresholdBackendTime = thresholdBackendTime " ;
        } else {
            thresholdResponseTime = value;
            conditionQuery = "set ApiCreatorAlertConfiguration.thresholdResponseTime = thresholdResponseTime " ;
        }
        var query =  "select '"+apiName+"' as apiName, '"+apiVersion+"' as apiVersion, '" 
                    + username + "' as apiCreator, '" + domainName + "' as apiCreatorTenantDomain," 
                    + parseInt(thresholdResponseTime) + "L as thresholdResponseTime," 
                    + parseInt(thresholdBackendTime) + "L as thresholdBackendTime update or insert into ApiCreatorAlertConfiguration "
                    + conditionQuery + "on ApiCreatorAlertConfiguration.apiName == apiName " 
                    + "and ApiCreatorAlertConfiguration.apiVersion == apiVersion";

        var result = APIUtil.executeQueryOnStreamProcessor(appName, query);
        var objArr = [];
        if(result != null ) {
            var parsedDataResult = JSON.parse(result);
            objArr = parsedDataResult;
        }
        return objArr;
    } catch (e) {
        log.error(e.message);
        return {
            error:true
        };
    }
};

var deletePublisherAlertConfigs  = function (apiName, apiVersion) {

    var log = new Log();
    var result;
    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var username = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var domainName = MultitenantUtils.getTenantDomain(username);

        var appName = "APIM_ALERT_CONFIGURATION"; 
        var query =  "delete ApiCreatorAlertConfiguration on ApiCreatorAlertConfiguration.apiName == '" 
                    + apiName + "' and ApiCreatorAlertConfiguration.apiVersion == '"
                    + apiVersion + "' and ApiCreatorAlertConfiguration.apiCreator == '" 
                    + username + "' and ApiCreatorAlertConfiguration.apiCreatorTenantDomain == '"
                    + domainName + "'; "
                    
        var result = APIUtil.executeQueryOnStreamProcessor(appName, query);
        var objArr = [];
        if(result != null ) {
            var parsedDataResult = JSON.parse(result);
            objArr = parsedDataResult;
        }
        return objArr;
    } catch (e) {
        log.error(e.message);
        return {
            error:true
        };
    }
};
%>
