<%
var agent = "subscriber";
var retrieveSavedAlertsTypes = function () {
    var i,api,apis,length, log = new Log();

    var gson = com.google.gson.Gson();
    try {

        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }

        var allAlertTypes = APIUtil.getAllAlertTypeByStakeHolder(agent);

        var allAlertTypesJson = JSON.parse(gson.toJson(allAlertTypes));

        var userName = jagg.getUser().username;

        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(userName);

        if ("carbon.super" == tenantDomain) {
            userName = userName + "@carbon.super";
        }

        var allSavedAlertTypes = APIUtil.getSavedAlertTypesIdsByUserNameAndStakeHolder(userName, agent);
        var allSavedAlertTypesJsonObj = JSON.parse(gson.toJson(allSavedAlertTypes));

        return {
            "error": false,
            "allAlertTypeJson": allAlertTypesJson,
            "savedAlertTypeJson": allSavedAlertTypesJsonObj
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var unSubscribe = function (userName){
    var log = new Log();

    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }
        var apiDataPublisher = org.wso2.carbon.apimgt.gateway.alert.AlertTypesPublisher;
        var apiDatapublisherInstance = new apiDataPublisher();

        apiDatapublisherInstance.unSubscribe(userName,agent);

        return {
            error: false
        }

    } catch (e) {

        log.error(e.code);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var saveAlertsTypes  = function (checkedAlertList, emailList,userName,checkedAlertListValues) {

    var gson = com.google.gson.Gson();
    var log = new Log();
    var result;
    try {

        var tenantAwareUserName = jagg.getUser().username;

        var APIManagerFactory = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance();
        var apiProviderImpl = APIManagerFactory.getAPIProvider(tenantAwareUserName);

        var apiDataPublisher = org.wso2.carbon.apimgt.gateway.alert.AlertTypesPublisher;

        var apiDatapublisherInstance = new apiDataPublisher();
        //if it is publisher "p" if it is store agent should be "s"


        apiDatapublisherInstance.saveAndPublishAlertTypesEvent(checkedAlertList, emailList, userName, agent,
                checkedAlertListValues);

        return {
            error: false
        }


    } catch (e) {

        log.error(e.code);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }


};

var retrieveSavedEmailList = function () {

    var gson = com.google.gson.Gson();
    var log = new Log();
    var result;
    try {

        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var userName = jagg.getUser().username;

        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(userName);

        if ("carbon.super" == tenantDomain) {
            userName = userName + "@carbon.super";
        }

        var allSavedEmailList = APIUtil.retrieveSavedEmailList(userName,agent);

        var allSavedEmailListJson = JSON.parse(gson.toJson(allSavedEmailList));

        return {
            "error": false,
            "allSavedEmailListJson": allSavedEmailListJson
        };


    } catch (e) {

        log.error(e.code);
        return {
            error: true,
            message: e.message.split(":")[1]
        };
    }


};

var getStoreAlertConfigs  = function () {

    var log = new Log();
    var result;
    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var tenantAwareUserName = jagg.getUser().username;
        //TODO add subscriber name to query
        var appName = "APIM_ALERT_CONFIGURATION"; 
        var query =  "from ApiSubscriberAlertConfiguration select applicationId ,apiName , apiVersion , thresholdRequestCountPerMin;";

        var result = APIUtil.executeQueryOnStreamProcessor(appName, query);

        var objArr = [];
        if(result != null ) {
            var parsedDataResult = JSON.parse(result);
            if(parsedDataResult.records != null) {              
              var items = parsedDataResult.records;
              for (var i = 0; i < items.length; i ++){
                    var record = items[i];
                    var obj =  {  
                              "values":{  
                                 "applicationId": record[0],
                                 "apiName" : record[1],
                                 "apiVersion" : record[2],
                                 "thresholdRequestCountPerMin":record[3]                      
                                 }
                              }
                    objArr.push(obj);
              }
            }
        }
        return objArr;
    } catch (e) {
        log.error(e.message);
        return {
            error:true
        };
    }
};

var addOrUpdateStoreAlertConfigs  = function (applicationId, apiName, apiVersion, thresholdRequestCountPerMin) {

    var log = new Log();
    var result;
    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var tenantAwareUserName = jagg.getUser().username;
        //TODO add subscriber name to query
        var appName = "APIM_ALERT_CONFIGURATION";
        var query =  "select '" + applicationId + "' as applicationId, '" + apiName + "' as apiName, '" 
                     + apiVersion + "' as apiVersion, " + parseInt(thresholdRequestCountPerMin) 
                     + " as thresholdRequestCountPerMin update or insert into ApiSubscriberAlertConfiguration " 
                     + "set ApiSubscriberAlertConfiguration.thresholdRequestCountPerMin = thresholdRequestCountPerMin "
                     + "on ApiSubscriberAlertConfiguration.applicationId == applicationId and " 
                     + "ApiSubscriberAlertConfiguration.apiName == apiName and ApiSubscriberAlertConfiguration.apiVersion == apiVersion";

        var result = APIUtil.executeQueryOnStreamProcessor(appName, query);
        var objArr = [];
        if(result != null ) {
            var parsedDataResult = JSON.parse(result);
            objArr = parsedDataResult;
        }
        return objArr;
    } catch (e) {
        log.error(e.message);
        return {
            error:true
        };
    }


};

var deleteStoreAlertConfigs  = function (applicationId, apiName, apiVersion) {

    var log = new Log();
    var result;
    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var tenantAwareUserName = jagg.getUser().username;
        //TODO add subscriber name to query
        var appName = "APIM_ALERT_CONFIGURATION"; 
        var query =  "delete ApiSubscriberAlertConfiguration on ApiSubscriberAlertConfiguration.applicationId == '" 
                     + applicationId + "' and ApiSubscriberAlertConfiguration.apiName == '"
                     + apiName + "' and ApiSubscriberAlertConfiguration.apiVersion == '"+apiVersion+"'";
        var result = APIUtil.executeQueryOnStreamProcessor(appName, query);
        var objArr = [];
        if(result != null ) {
            var parsedDataResult = JSON.parse(result);
            objArr = parsedDataResult;
        }
        return objArr;
    } catch (e) {
        log.error(e.message);
        return {
            error:true
        };
    }
};
%>
